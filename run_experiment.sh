#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
CONFIG_FILE="configs/hrrp_fsl_config.yaml"
CONDA_ENV_NAME="CLIP"      # Replace with your actual Conda environment name if different
# FSL settings for testing (These are defaults if not overridden by test_fsl.py args)
K_SHOTS_TO_TEST=(1 5)      # Test both 1-shot and 5-shot scenarios

# --- Activate Environment ---
echo "Activating Conda environment: $CONDA_ENV_NAME..."
# Source conda.sh to make conda command available in script
source "$(conda info --base)/etc/profile.d/conda.sh" || { echo "Failed to source conda.sh. Is Conda installed and configured?"; exit 1; }
conda activate "$CONDA_ENV_NAME" || { echo "Failed to activate Conda environment '$CONDA_ENV_NAME'."; exit 1; }
echo "Environment activated."

# --- Verify Config ---
echo "--------------------------------------------------"
echo "Running CMSA-HRRP (Adapter Version) Experiment Pipeline"
echo "--------------------------------------------------"
echo "This script will run the full pipeline: Adapter Training -> Center Computation -> SemAlign Training -> FSL Evaluation."
echo "It relies on semantic features generated by 'run_prerequisites.sh'."
echo "IMPORTANT: Ensure '$CONFIG_FILE' is configured with the desired settings for:"
echo "           - VLM variant, Text type (consistent with prerequisites)"
echo "           - Adapter loss settings (alignment_loss_type, use_contrastive, lambda_v2v, temperature_v)"
echo "           - Training hyperparameters (epochs, lr, batch_size)"
echo "           - FSL settings (n_way, k_shot, q_query, etc.)"
echo ""
# Optional: Add yq dependency check if uncommenting below
# if command -v yq &> /dev/null; then
#     VARIANT=$(yq e '.model.foundation_model.variant' $CONFIG_FILE)
#     TEXT_TYPE=$(yq e '.semantics.generation.text_type' $CONFIG_FILE)
#     USE_CONTRASTIVE=$(yq e '.training.adapter_loss.use_contrastive' $CONFIG_FILE)
#     echo "Current Config: Variant=$VARIANT, TextType=$TEXT_TYPE, UseContrastive=$USE_CONTRASTIVE"
# else
#     echo "NOTE: 'yq' command not found. Cannot display current config settings automatically."
# fi
read -p "Press Enter to continue after verifying the config file..." -r
echo ""

# --- Stage 1: Train Adapter ---
echo "--- Stage 1: Training Adapter (train_adapter.py) ---"
python method/train_adapter.py --config "$CONFIG_FILE"
if [ $? -ne 0 ]; then
    echo "ERROR: Adapter training failed."
    conda deactivate
    exit 1
fi
echo "Adapter training completed."
echo ""

# --- Stage 2: Compute Base Centers (z_V) ---
echo "--- Stage 2: Computing Base Centers (compute_centers.py) ---"
python scripts/compute_centers.py --config "$CONFIG_FILE"
if [ $? -ne 0 ]; then
    echo "ERROR: Center computation failed."
    conda deactivate
    exit 1
fi
echo "Center computation completed."
echo ""

# --- Stage 3: Train SemAlign Module (h_F for z_V) ---
echo "--- Stage 3: Training SemAlign Module (train_semalign_stage3.py) ---"
python method/train_semalign_stage3.py --config "$CONFIG_FILE"
if [ $? -ne 0 ]; then
    echo "ERROR: SemAlign module training failed."
    conda deactivate
    exit 1
fi
echo "SemAlign module training completed."
echo ""

# --- Stage 4: Few-Shot Evaluation ---
echo "--- Stage 4: Running Few-Shot Evaluation (test_fsl.py) ---"
# This will use the trained adapter and semalign module from the steps above.
# It runs the kappa sweep or fixed kappa based on test_fsl.py logic and config/args.

# Loop through specified K-shot values
#EXIT_CODE=0
#for k_shot in "${K_SHOTS_TO_TEST[@]}"; do
#  echo ""
#  echo "Running evaluation for ${k_shot}-shot..."
#
#  # Run default evaluation (usually kappa sweep unless overridden in test_fsl.py or config)
#  python method/test_fsl.py --config "$CONFIG_FILE" --k_shot "$k_shot"
#
#  if [ $? -ne 0 ]; then
#      echo "ERROR: FSL evaluation failed for ${k_shot}-shot."
#      EXIT_CODE=1 # Mark failure but continue other shots if needed
#      # break # Uncomment this line to stop immediately on first failure
#  else
#      echo "${k_shot}-shot evaluation completed successfully."
#  fi
#done
#echo ""
#
#if [ $EXIT_CODE -ne 0 ]; then
#    echo "One or more FSL evaluations failed."
#    conda deactivate
#    exit 1
#fi

echo "All few-shot evaluations finished."

# --- Deactivate Environment ---
echo "Deactivating Conda environment..."
conda deactivate
echo "Experiment script finished successfully."

exit 0